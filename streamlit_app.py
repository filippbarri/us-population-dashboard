# –Ü–º–ø–æ—Ä—Ç –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="üåé",
    layout="wide",
    initial_sidebar_state="expanded"
)

alt.themes.enable("dark")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
df_reshaped = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv')
df_reshaped.rename(columns={'Rank': 'year', 'State': 'state', 'Population': 'population'}, inplace=True)

# --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.title("üìä US Population Dashboard")

    # —Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    year_list = list(df_reshaped['year'].unique())[::-1]

    # –≤–∏–±—ñ—Ä —Ä–æ–∫—É
    selected_year = st.selectbox('Select a year', year_list, index=len(year_list)-1)
    df_selected_year = df_reshaped.query('year == @selected_year')

    # –≤–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó —Ç–µ–º–∏
    color_theme_list = ['blues', 'viridis', 'greens', 'inferno', 'magma', 'plasma']
    color_theme = st.selectbox('Select color theme', color_theme_list)

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.title(f"üìà Population of US States in {selected_year}")

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è Altair
chart = alt.Chart(df_selected_year).mark_bar().encode(
    x=alt.X('state:N', sort='-y', title='State'),
    y=alt.Y('population:Q', title='Population'),
    color=alt.Color('population:Q', scale=alt.Scale(scheme=color_theme))
).properties(
    width=900,
    height=500
)

st.altair_chart(chart, use_container_width=True)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è Plotly (–¥–æ–¥–∞—Ç–∫–æ–≤–æ)
fig = px.choropleth(
    df_selected_year,
    locations='state',
    locationmode="USA-states",
    color='population',
    color_continuous_scale=color_theme,
    scope="usa",
    title=f"US States Population in {selected_year}"
)

#—Ç–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞

def make_heatmap(input_df, input_y, input_x, input_color, input_color_them
heatmap =alt.Chart(input_df).mark_rect().encode(y=alt. Y(f'(input_y):0', axis=alt.Axis (title="year", titleFonts
x=alt.X(f'(input_x}:0', axis=alt.Axis(title="", titleFontSize=
color=alt. Color (f'maxfinput_color]) :0',
Legend=None,
scale=alt.Scale(scheme=input_color_theme)) ,
stroke=alt.value('black'),
strokewidth=alt.value(0.25),
) .properties (width=900
). configure_axis (
LabelFontSize=12,
titleFontSize=12
# height=300
return heatmap
st.plotly_chart(fig, use_container_width=True)

# --- –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ –º–µ—Ç—Ä–∏–∫–∞ ---
total_population = int(df_selected_year['population'].sum())
st.metric(label=f"Total US population in {selected_year}", value=f"{total_population:,}")

#—Ö–æ—Ä–æ–ø–ª–µ—Ç–Ω–∞ –∫–∞—Ä—Ç–∞
def make_heatmap(input_df, input_y, input_x, input_color, input_color_them
heatmap = alt. Chart (input_df) mark_rect) . encode (
y=alt. Y(f'(input_y):0', axis=alt.Axis (title="year", titleFonts
x=alt.X(f'(input_x}:0', axis=alt.Axis(title="", titleFontSize=
color=alt. Color (f'maxfinput_color]) :0',
Legend=None,
scale=alt.Scale(scheme=input_color_theme)) ,
stroke=alt.value('black'),
strokewidth=alt.value(0.25),
) .properties (width=900
). configure_axis (
LabelFontSize=12,
titleFontSize=12
# height=300
return heatmap
